package com.superbomberman.game;

import com.superbomberman.model.User;
import com.superbomberman.service.AuthService;

import static com.superbomberman.model.MapLoader.enemy;
import static com.superbomberman.model.MapLoader.player1;
import static com.superbomberman.model.MapLoader.player2;
import static com.superbomberman.controller.MenuController.isOnePlayer;

/**
 * Gestionnaire de l'√©tat du jeu et des statistiques
 *
 * @author Jules Fuselier
 * @version 2.0
 * @since 2025-06-10
 */
public class GameStateManager {
    private User currentUser;
    private AuthService authService;
    private int gameScore = 0;
    private boolean gameWon = false;
    private boolean gameEnded = false;
    private long gameStartTime;

    // PROPRI√âT√âS POUR LA GESTION DE FIN DE PARTIE
    private GameEndReason endReason = null;
    private int winnerPlayer = 0; // 0 = aucun, 1 = joueur 1, 2 = joueur 2
    private boolean isDraw = false;

    // Optionnel : Timer de partie (pour mode chrono)
    private long gameTimeLimit = 0; // 0 = pas de limite
    private boolean hasTimeLimit = false;

    public enum GameEndReason {
        PLAYER_VICTORY,     // Un joueur a gagn√©
        PLAYER_DEFEAT,      // Le joueur a perdu (solo)
        MUTUAL_DESTRUCTION, // Tous les joueurs morts en m√™me temps
        TIME_UP,           // Temps √©coul√©
        ENEMY_DEFEATED     // Ennemi vaincu (mode solo)
    }

    public GameStateManager(User currentUser, AuthService authService) {
        this.currentUser = currentUser;
        this.authService = authService;
        this.gameStartTime = System.currentTimeMillis();
    }

    /**
     * Met √† jour le score du jeu
     */
    public void updateScore(int points) {
        gameScore += points;
        System.out.println("Score actuel: " + gameScore);
    }

    /**
     *  V√©rifie toutes les conditions de fin de jeu
     */
    public void checkGameConditions() {
        if (gameEnded) return; // Ne pas v√©rifier si le jeu est d√©j√† termin√©

        // 1. V√©rifier le timer (si activ√©)
        if (hasTimeLimit && isTimeUp()) {
            endGameByTime();
            return;
        }

        // 2. V√©rifier les conditions selon le mode de jeu
        if (isOnePlayer) {
            checkSoloGameConditions();
        } else {
            checkMultiplayerGameConditions();
        }
    }

    /**
     *  V√©rifie les conditions de fin pour le mode solo
     */
    private void checkSoloGameConditions() {
        // V√©rifier si le joueur 1 est mort
        if (player1 != null && player1.isDead()) {
            endGame(GameEndReason.PLAYER_DEFEAT, 0, false);
            return;
        }

        // V√©rifier si l'ennemi est vaincu
        if (enemy != null && isEnemyDefeated()) {
            endGame(GameEndReason.ENEMY_DEFEATED, 1, true);
            return;
        }
    }

    /**
     * ‚ú® V√©rifie les conditions de fin pour le mode 2 joueurs
     */
    private void checkMultiplayerGameConditions() {
        boolean player1Alive = player1 != null && player1.isAlive();
        boolean player2Alive = player2 != null && player2.isAlive();

        // Cas 1: Les deux joueurs sont morts ‚Üí √âgalit√©
        if (!player1Alive && !player2Alive) {
            endGame(GameEndReason.MUTUAL_DESTRUCTION, 0, false);
            return;
        }

        // Cas 2: Seul le joueur 1 survit ‚Üí Joueur 1 gagne
        if (player1Alive && !player2Alive) {
            endGame(GameEndReason.PLAYER_VICTORY, 1, true);
            return;
        }

        // Cas 3: Seul le joueur 2 survit ‚Üí Joueur 2 gagne
        if (!player1Alive && player2Alive) {
            endGame(GameEndReason.PLAYER_VICTORY, 2, true);
            return;
        }

        // Cas 4: Les deux sont vivants ‚Üí Le jeu continue
    }

    /**
     * ‚ú® Termine le jeu par √©coulement du temps
     */
    private void endGameByTime() {
        if (isOnePlayer) {
            // En solo, si le temps est √©coul√© ‚Üí d√©faite
            endGame(GameEndReason.TIME_UP, 0, false);
        } else {
            // En multijoueur, d√©terminer le gagnant selon les crit√®res
            // Option 1: √âgalit√©
            endGame(GameEndReason.TIME_UP, 0, false);

            // Option 2: Gagnant selon le score, les vies, etc.
            // int winner = determineWinnerByScore();
            // endGame(GameEndReason.TIME_UP, winner, winner > 0);
        }
    }

    /**
     * ‚ú® M√âTHODE CENTRALE - Termine le jeu avec une raison sp√©cifique
     */
    private void endGame(GameEndReason reason, int winner, boolean victory) {
        if (gameEnded) return; // √âviter les appels multiples

        this.gameEnded = true;
        this.endReason = reason;
        this.winnerPlayer = winner;
        this.gameWon = victory;
        this.isDraw = (winner == 0 && reason == GameEndReason.MUTUAL_DESTRUCTION);

        // Afficher le r√©sultat
        displayGameResult();

        // Mettre √† jour les statistiques
        updatePlayerStats();

        // D√©clencher les effets de fin de partie
        triggerEndGameEffects();
    }

    /**
     * ‚ú® Affiche le r√©sultat de la partie
     */
    private void displayGameResult() {
        System.out.println("========================================");
        System.out.println("üéÆ FIN DE PARTIE üéÆ");
        System.out.println("========================================");

        switch (endReason) {
            case PLAYER_VICTORY -> {
                System.out.println("üèÜ VICTOIRE ! Joueur " + winnerPlayer + " a gagn√© !");
            }
            case PLAYER_DEFEAT -> {
                System.out.println("üíÄ D√âFAITE ! Vous avez √©t√© √©limin√© !");
            }
            case MUTUAL_DESTRUCTION -> {
                System.out.println("‚ò†Ô∏è √âGALIT√â ! Tous les joueurs ont √©t√© √©limin√©s !");
            }
            case TIME_UP -> {
                if (winnerPlayer > 0) {
                    System.out.println("‚è∞ TEMPS √âCOUL√â ! Joueur " + winnerPlayer + " gagne !");
                } else {
                    System.out.println("‚è∞ TEMPS √âCOUL√â ! Aucun gagnant !");
                }
            }
            case ENEMY_DEFEATED -> {
                System.out.println("üéâ VICTOIRE ! Ennemi vaincu !");
            }
        }

        System.out.println("Score final: " + gameScore);
        System.out.println("Dur√©e de la partie: " + getGameDurationSeconds() + " secondes");
        System.out.println("========================================");
    }

    /**
     * ‚ú® Met √† jour les statistiques du joueur
     */
    private void updatePlayerStats() {
        if (currentUser != null && authService != null) {
            authService.updateUserStats(currentUser, gameWon, gameScore);
            System.out.println("üìä Statistiques mises √† jour pour " + currentUser.getUsername());
        }
    }

    /**
     * ‚ú® D√©clenche les effets visuels/sonores de fin de partie
     */
    private void triggerEndGameEffects() {
        // TODO: √Ä impl√©menter dans l'√©tape suivante
        // - Animation de victoire/d√©faite
        // - Sons de fin de partie
        // - Transition vers l'√©cran de r√©sultats
        System.out.println("üé¨ D√©clenchement des effets de fin de partie...");
    }

    // ‚ú® M√âTHODES UTILITAIRES

    /**
     * Active un timer pour la partie
     */
    public void setGameTimeLimit(long timeLimitInSeconds) {
        this.gameTimeLimit = timeLimitInSeconds * 1000; // Convertir en millisecondes
        this.hasTimeLimit = true;
        System.out.println("‚è±Ô∏è Timer activ√©: " + timeLimitInSeconds + " secondes");
    }

    /**
     * V√©rifie si le temps est √©coul√©
     */
    public boolean isTimeUp() {
        if (!hasTimeLimit) return false;
        return (System.currentTimeMillis() - gameStartTime) >= gameTimeLimit;
    }

    /**
     * Retourne le temps restant en secondes
     */
    public long getRemainingTimeSeconds() {
        if (!hasTimeLimit) return -1;
        long remaining = gameTimeLimit - (System.currentTimeMillis() - gameStartTime);
        return Math.max(0, remaining / 1000);
    }

    /**
     * Retourne la dur√©e de la partie en secondes
     */
    public long getGameDurationSeconds() {
        return (System.currentTimeMillis() - gameStartTime) / 1000;
    }

    /**
     * Force la fin de partie (pour debug ou cas sp√©ciaux)
     */
    public void forceEndGame(GameEndReason reason, int winner) {
        endGame(reason, winner, winner > 0);
    }

    // M√©thodes existantes mises √† jour
    public void setGameWon(boolean won) {
        // Cette m√©thode est conserv√©e pour compatibilit√©
        if (!gameEnded) {
            endGame(won ? GameEndReason.PLAYER_VICTORY : GameEndReason.PLAYER_DEFEAT,
                    won ? 1 : 0, won);
        }
    }

    /**
     *  V√©rifie si l'ennemi est vaincu
     */
    private boolean isEnemyDefeated() {
        // V√©rifier si l'ennemi existe et s'il est mort
        if (enemy == null) {
            return false; // Pas d'ennemi = pas de victoire par ennemi vaincu
        }

        return enemy.isDead(); // Utilise la m√©thode isDead() d√©j√† pr√©sente dans Enemy.java
    }

    /**
     *  V√©rifie si le joueur est vaincu
     */
    private boolean isPlayerDefeated() {
        if (isOnePlayer) {
            // Mode solo : v√©rifier si le joueur 1 est mort
            return player1 != null && player1.isDead();
        } else {
            // Mode 2 joueurs : v√©rifier si les deux joueurs sont morts
            boolean player1Dead = player1 == null || player1.isDead();
            boolean player2Dead = player2 == null || player2.isDead();
            return player1Dead && player2Dead;
        }
    }

    public int getGameScore() { return gameScore; }
    public boolean isGameWon() { return gameWon; }
    public User getCurrentUser() { return currentUser; }
    public long getGameStartTime() { return gameStartTime; }

    public boolean isGameEnded() { return gameEnded; }
    public GameEndReason getEndReason() { return endReason; }
    public int getWinnerPlayer() { return winnerPlayer; }
    public boolean isDraw() { return isDraw; }
    public boolean hasTimeLimit() { return hasTimeLimit; }
}