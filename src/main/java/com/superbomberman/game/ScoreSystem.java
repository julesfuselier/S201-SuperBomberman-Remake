package com.superbomberman.game;

import com.superbomberman.model.Player;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Syst√®me de score complet pour Super Bomberman
 * G√®re les points, combos, bonus de temps et vies suppl√©mentaires
 *
 * @author Jules Fuselier
 * @version 1.0
 * @since 2025-06-10
 */
public class ScoreSystem {

    // Configuration des points
    private static final int POINTS_WALL_DESTROYED = 10;
    private static final int POINTS_POWERUP_COLLECTED = 50;
    private static final int POINTS_ENEMY_KILLED = 100;

    // Configuration des bonus de temps
    private static final int TIME_BONUS_MULTIPLIER = 10;

    // Configuration des vies suppl√©mentaires
    private static final int EXTRA_LIFE_THRESHOLD = 10000; // Tous les 10 000 points

    // √âtat du syst√®me
    // Remplace le score global par un score par joueur
    private Map<Player, Integer> playerScores = new HashMap<>();
    private Map<Player, List<Integer>> playerCombos = new HashMap<>();
    private Map<Player, Integer> playerLivesEarned = new HashMap<>();
    private GameStateManager gameStateManager;

    public ScoreSystem(GameStateManager gameStateManager) {
        this.gameStateManager = gameStateManager;
    }

    /**
     * üéØ Ajoute des points pour un ennemi tu√©
     */
    public void addEnemyKilled(Player player) {
        playerCombos.computeIfAbsent(player, k -> new ArrayList<>()).add(POINTS_ENEMY_KILLED);
        System.out.println("üíÄ Ennemi tu√© par " + player + " : +" + POINTS_ENEMY_KILLED + " points");
    }

    /**
     * üí• Traite le combo d'une explosion (appel√© apr√®s toutes les morts)
     */
    public void processExplosionCombo(Player player) {
        List<Integer> comboList = playerCombos.getOrDefault(player, new ArrayList<>());
        if (comboList.isEmpty()) {
            return;
        }

        int totalPoints = 0;
        int enemyCount = comboList.size();

        // Calculer les points avec bonus de combo
        for (int i = 0; i < comboList.size(); i++) {
            int basePoints = comboList.get(i);
            int comboMultiplier = i + 1; // 1er ennemi = x1, 2e = x2, etc.
            int points = basePoints * comboMultiplier;
            totalPoints += points;

            System.out.println("üî• Combo x" + comboMultiplier + " : " + basePoints + " -> " + points + " points");
        }

        // Afficher le combo si multiple
        if (enemyCount > 1) {
            System.out.println("üéä COMBO " + enemyCount + " ENNEMIS pour " + player + " ! Total : +" + totalPoints + " points");
        }

        addScore(player, totalPoints);
        comboList.clear();
    }

    /**
     * üèÜ Calcule et ajoute le bonus de temps
     */
    public void calculateTimeBonus(Player player, int maxTimeSeconds, int usedTimeSeconds) {
        int remainingTime = Math.max(0, maxTimeSeconds - usedTimeSeconds);
        int timeBonus = remainingTime * TIME_BONUS_MULTIPLIER;

        if (timeBonus > 0) {
            System.out.println("‚è±Ô∏è Bonus de temps pour " + player + " : " + remainingTime + "s √ó " + TIME_BONUS_MULTIPLIER + " = +" + timeBonus + " points");
            addScore(player, timeBonus);
        }
    }

    /**
     * üéÅ Ajoute des points pour un power-up collect√©
     */
    public void addPowerUpCollected(Player player) {
        addScore(player, POINTS_POWERUP_COLLECTED);
        System.out.println("‚ú® Power-up collect√© par " + player + " : +" + POINTS_POWERUP_COLLECTED + " points");
    }

    /**
     * üß± Ajoute des points pour un mur d√©truit
     */
    public void addWallDestroyed(Player player) {
        addScore(player, POINTS_WALL_DESTROYED);
        System.out.println("üß± Mur d√©truit par " + player + " : +" + POINTS_WALL_DESTROYED + " points");
    }

    /**
     * üèÅ Termine le niveau et calcule tous les bonus
     */
    public void finishLevel(int maxTimeSeconds, int usedTimeSeconds) {
        // Finaliser les combos en cours
        for (Player player : playerCombos.keySet()) {
            processExplosionCombo(player);
        }

        // Calculer le bonus de temps
        for (Player player : playerScores.keySet()) {
            calculateTimeBonus(player, maxTimeSeconds, usedTimeSeconds);
        }

        System.out.println("üéâ Niveau termin√© !");
    }

    /**
     * üìä M√©thode priv√©e pour ajouter du score et v√©rifier les vies
     */
    private void addScore(Player player, int points) {
        int newScore = playerScores.getOrDefault(player, 0) + points;
        playerScores.put(player, newScore);

        // Gestion des vies suppl√©mentaires (optionnel)
        int lives = newScore / EXTRA_LIFE_THRESHOLD;
        if (lives > playerLivesEarned.getOrDefault(player, 0)) {
            playerLivesEarned.put(player, lives);
            System.out.println("‚ù§Ô∏è Vie suppl√©mentaire gagn√©e par " + player + " !");
        }

        // Mettre √† jour le GameStateManager
        if (gameStateManager != null) {
            gameStateManager.updateScore(points);
        }

        System.out.println("Score actuel de " + player + " : " + newScore);
    }

    /**
     * üíö V√©rifie si le joueur a gagn√© des vies suppl√©mentaires
     */
    private void checkExtraLives(int oldScore, int newScore) {
        int oldLives = oldScore / EXTRA_LIFE_THRESHOLD;
        int newLives = newScore / EXTRA_LIFE_THRESHOLD;
        // Cette m√©thode n'est plus utilis√©e, car la gestion des vies se fait par joueur dans playerLivesEarned
        // Elle peut √™tre supprim√©e si non utilis√©e ailleurs
    }

    /**
     * üéÆ Remet √† z√©ro le syst√®me de score
     */
    public void reset() {
        playerScores.clear();
        playerCombos.clear();
        playerLivesEarned.clear();
        System.out.println("üîÑ Syst√®me de score remis √† z√©ro");
    }

    // Getters
    public int getScore(Player player) {
        return playerScores.getOrDefault(player, 0);
    }

    /**
     * üìã Affiche un r√©sum√© du score
     */
    public void displayScoreSummary() {
        System.out.println("=== üìä R√âSUM√â DU SCORE ===");
        for (Map.Entry<Player, Integer> entry : playerScores.entrySet()) {
            System.out.println("Joueur " + entry.getKey() + " : " + entry.getValue() + " points");
        }
        System.out.println("========================");
    }

    /**
     * üìã M√©thodes utilitaires pour initialiser les joueurs
     */
    public void registerPlayer(Player player) {
        playerScores.putIfAbsent(player, 0);
        playerCombos.putIfAbsent(player, new ArrayList<>());
        playerLivesEarned.putIfAbsent(player, 0);
    }
}