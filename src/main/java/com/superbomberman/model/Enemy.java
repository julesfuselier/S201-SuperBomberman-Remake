package com.superbomberman.model;

/**
 * Repr√©sente un ennemi dans le jeu Super Bomberman.
 * <p>
 * Cette classe g√®re la position courante et pr√©c√©dente de l'ennemi,
 * ainsi que son √©tat de vie/mort pour le syst√®me de victoire.
 * </p>
 *
 * @author Jules Fuselier
 * @version 2.0
 * @since 2025-06-08
 */
public class Enemy {

    /** Position actuelle sur l'axe X de l'ennemi. */
    private int x;

    /** Position actuelle sur l'axe Y de l'ennemi. */
    private int y;

    /** Position pr√©c√©dente sur l'axe X de l'ennemi. */
    private int previousX;

    /** Position pr√©c√©dente sur l'axe Y de l'ennemi. */
    private int previousY;

    /** Indique si l'ennemi est vivant */
    private boolean isAlive = true;

    /**
     * D√©finit la position de l'ennemi et met √† jour la position pr√©c√©dente.
     *
     * @param x Nouvelle coordonn√©e X de l'ennemi.
     * @param y Nouvelle coordonn√©e Y de l'ennemi.
     */
    public void setPosition(int x, int y) {
        this.previousX = this.x;
        this.previousY = this.y;
        this.x = x;
        this.y = y;
    }

    /**
     * Retourne la position actuelle X de l'ennemi.
     *
     * @return La coordonn√©e X actuelle.
     */
    public int getX() {
        return x;
    }

    /**
     * Retourne la position actuelle Y de l'ennemi.
     *
     * @return La coordonn√©e Y actuelle.
     */
    public int getY() {
        return y;
    }

    /**
     * Retourne la derni√®re position X enregistr√©e avant le dernier d√©placement.
     *
     * @return La coordonn√©e X pr√©c√©dente.
     */
    public int getPreviousX() {
        return previousX;
    }

    /**
     * Retourne la derni√®re position Y enregistr√©e avant le dernier d√©placement.
     *
     * @return La coordonn√©e Y pr√©c√©dente.
     */
    public int getPreviousY() {
        return previousY;
    }
    
    /**
     * Tue l'ennemi (le marque comme mort)
     */
    public void kill() {
        this.isAlive = false;
        System.out.println("üíÄ Ennemi √©limin√© √† la position (" + x + ", " + y + ")");
    }

    /**
     * Ressuscite l'ennemi (pour les cas sp√©ciaux ou reset)
     */
    public void revive() {
        this.isAlive = true;
        System.out.println("‚ú® Ennemi ressuscit√©");
    }

    /**
     * V√©rifie si l'ennemi est vivant
     * @return true si l'ennemi est vivant, false sinon
     */
    public boolean isAlive() {
        return isAlive;
    }

    /**
     * V√©rifie si l'ennemi est mort
     * @return true si l'ennemi est mort, false sinon
     */
    public boolean isDead() {
        return !isAlive;
    }

    /**
     * Tue l'ennemi (pour compatibilit√©)
     */
    public void setDead(boolean dead) {
        this.isAlive = !dead;
    }

    /**
     * D√©finit si l'ennemi est vivant ou mort
     */
    public void setAlive(boolean b) {
        this.isAlive = b;
    }
}